/**
 * Copyright 2013-2016 Rene Widera, Felix Schmitt, Axel Huebl,
 *                     Alexander Grund
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include <vector>
#include "traits/Unit.hpp"
#include "traits/UnitDimension.hpp"

namespace picongpu
{

namespace traits
{

/* openPMD uses the powers of the 7 SI base measures to describe
 * the unit of a record
 * \see http://git.io/vROmP */
BOOST_CONSTEXPR_OR_CONST uint32_t NUnitDimension = 7;

// pre-C++11 "scoped enumerator" work-around
namespace SIBaseUnits {
enum SIBaseUnits_t
{
    length = 0,                   // L
    mass = 1,                     // M
    time = 2,                     // T
    electricCurrent = 3,          // I
    thermodynamicTemperature = 4, // theta
    amountOfSubstance = 5,        // N
    luminousIntensity = 6,        // J
};
}

template<typename T_Type>
struct Unit<position<T_Type> >
{
    static std::vector<double> get()
    {
        std::vector<double> unit(simDim);
        /* in-cell position needs two transformations to get to SI:
           in-cell [0;1) -> dimensionless scaling to grid -> SI */
        for(uint32_t i=0;i<simDim;++i)
            unit[i]=cellSize[i]*UNIT_LENGTH;

        return unit;
    }
};
template<typename T_Type>
struct UnitDimension<position<T_Type> >
{
    static std::vector<float_64> get()
    {
        /* L, M, T, I, theta, N, J
         *
         * position is in meter: m
         *   -> L
         */
        std::vector<float_64> unitDimension( NUnitDimension, 0.0 );
        unitDimension.at(SIBaseUnits::length) = 1.0;

        return unitDimension;
    }
};

template<>
struct Unit<radiationFlag>
{
    /* zero-sized vector indicating unitless flag for hdf5 and adios output */
    static std::vector<double> get()
    {
        std::vector<double> unit;
        return unit;
    }
};
template<>
struct UnitDimension<radiationFlag>
{
    static std::vector<float_64> get()
    {
        /* radiationFlag is unitless
         */
        std::vector<float_64> unitDimension( NUnitDimension, 0.0 );

        return unitDimension;
    }
};

template<>
struct Unit<momentum >
{
    static std::vector<double> get()
    {
        const uint32_t components = GetNComponents<typename momentum::type>::value;

        std::vector<double> unit(components);
        for(uint32_t i=0;i<components;++i)
            unit[i]=UNIT_MASS*UNIT_SPEED;

        return unit;
    }
};
template<>
struct UnitDimension<momentum >
{
    static std::vector<float_64> get()
    {
        /* L, M, T, I, theta, N, J
         *
         * momentum is in mass times speed: kg * m / s
         *   -> L * M * T^-1
         */
        std::vector<float_64> unitDimension( NUnitDimension, 0.0 );
        unitDimension.at(SIBaseUnits::length) =  1.0;
        unitDimension.at(SIBaseUnits::mass)   =  1.0;
        unitDimension.at(SIBaseUnits::time)   = -1.0;

        return unitDimension;
    }
};

template<>
struct Unit<momentumPrev1>
{
    static std::vector<double> get()
    {
        const uint32_t components = GetNComponents<typename momentumPrev1::type>::value;

        std::vector<double> unit(components);
        for(uint32_t i=0;i<components;++i)
            unit[i]=UNIT_MASS*UNIT_SPEED;

        return unit;
    }
};
template<>
struct UnitDimension<momentumPrev1>
{
    static std::vector<float_64> get()
    {
        /* L, M, T, I, theta, N, J
         *
         * momentum is in mass times speed: kg * m / s
         *   -> L * M * T^-1
         */
        std::vector<float_64> unitDimension( NUnitDimension, 0.0 );
        unitDimension.at(SIBaseUnits::length) =  1.0;
        unitDimension.at(SIBaseUnits::mass)   =  1.0;
        unitDimension.at(SIBaseUnits::time)   = -1.0;

        return unitDimension;
    }
};

template<>
struct Unit<weighting >
{
    /* zero-sized vector indicating unitless flag for hdf5 and adios output */
    static std::vector<double> get()
    {
        std::vector<double> unit;
        return unit;
    }
};
template<>
struct UnitDimension<weighting >
{
    static std::vector<float_64> get()
    {
        /* weighting is unitless
         */
        std::vector<float_64> unitDimension( NUnitDimension, 0.0 );

        return unitDimension;
    }
};

template<>
struct Unit<particleId>
{
    /* unitless and not scaled by a factor: by convention 1.0 */
    static std::vector<double> get()
    {
        std::vector<double> unit( 1, 1.0 );
        return unit;
    }
};
template<>
struct UnitDimension<particleId>
{
    static std::vector<float_64> get()
    {
        /* unitless */
        return std::vector<float_64>( NUnitDimension, 0.0 );
    }
};

template<typename T_Type>
struct Unit<globalCellIdx<T_Type> >
{
    static std::vector<double> get()
    {
        std::vector<double> unit(simDim);
        for(uint32_t i=0;i<simDim;++i)
            unit[i]=1.0;
        return unit;
    }
};
template<typename T_Type>
struct UnitDimension<globalCellIdx<T_Type> >
{
    static std::vector<float_64> get()
    {
        /* L, M, T, I, theta, N, J
         *
         * globalCellIdx is a lengths: m
         *   -> L
         */
        std::vector<float_64> unitDimension( NUnitDimension, 0.0 );
        unitDimension.at(SIBaseUnits::length) = 1.0;

        return unitDimension;
    }
};

template<>
struct Unit<boundElectrons>
{
    /* zero-sized vector indicating unitless flag for hdf5 and adios output */
    static std::vector<double> get()
    {
        std::vector<double> unit;
        return unit;
    }
};
template<>
struct UnitDimension<boundElectrons>
{
    static std::vector<float_64> get()
    {
        /* boundElectrons is unitless
         */
        std::vector<float_64> unitDimension( NUnitDimension, 0.0 );

        return unitDimension;
    }
};

} // namespace traits
} // namespace picongpu
