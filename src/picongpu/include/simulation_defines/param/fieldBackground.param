/**
 * Copyright 2014 Axel Huebl
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/** Load pre-defined templates */
#include "fields/background/templates/bgrTWTS.def"


/** Load external background fields
 *
 */
namespace picongpu
{
    class fieldBackgroundE
    {
    public:
        /* Add this additional field for pushing particles */
        static const bool InfluenceParticlePusher = false;

        /* We use this to calculate your SI input back to our unit system */
        const float3_64 unitField;
        HDINLINE fieldBackgroundE( const float3_64 unitField ) : unitField(unitField)
        {}

        /** Specify your background field E(r,t) here
         *
         * \param cellIdx The total cell id counted from the start at t=0
         * \param currentStep The current time step */
        HDINLINE float3_X
        operator()( const DataSpace<simDim>& cellIdx,
                    const uint32_t currentStep ) const
        {
            /* example 1: TWTS background pulse */
            const float_X amplitude( 1.0e9 / unitField[0] ); // 1 GV / m

            /** \see constructor of `TWTSFieldE` in
             *       src/picongpu/include/fields/background/templates/bgrTWTS.def
             *
             *  optional, omitted parameters with default values:
             *       phi (90.*(PI/180.) rad), beta_0 (c), tdelay_user(0 s),
             *       auto_tdelay(true), includeCollidingTWTS(false)
             */
            templates::TWTSFieldE twtsFieldE( 25.0e-6,            /* focus_y [m] */
                                              0.8e-6,             /* wavelength [m] */
                                              30.0e-15 / 2.35482, /* pulselength [s] */
                                              20.0e-6,            /* w_x [m] */
                                              0.01 );             /* w_y [m] */

            return amplitude * twtsFieldE( cellIdx, currentStep );

            /* example 2: own formula */
            // const float_64 period_SI( 20.0e-6 );               /*     20 microns */
            // const float_X amplitude( 100.0e9 / unitField[0] ); /* +/- 100 GV/m   */

            // const float_64 y_SI = cellIdx.y() * SI::CELL_HEIGHT_SI;
            // const float_X sinArg = precisionCast<float_X>( y_SI / period_SI * 2.0 * PI );

            // return float3_X( 0.0, amplitude * math::cos( sinArg ), 0.0);
        }
    };

    class fieldBackgroundB
    {
    public:
        /* Add this additional field for pushing particles */
        static const bool InfluenceParticlePusher = false;

        /* We use this to calculate your SI input back to our unit system */
        const float3_64 unitField;
        HDINLINE fieldBackgroundB( const float3_64 unitField ) : unitField(unitField)
        {}

        /** Specify your background field B(r,t) here
         *
         * \param cellIdx The total cell id counted from the start at t=0
         * \param currentStep The current time step */
        HDINLINE float3_X
        operator()( const DataSpace<simDim>& cellIdx,
                    const uint32_t currentStep ) const
        {
            /* example: TWTS background pulse */
            const float_X amplitude( 1.0e9 * SI::SPEED_OF_LIGHT_SI / unitField[0] ); // 1 GV / m * c = [T]

            /** \see constructor of `TWTSFieldB` in
             *       src/picongpu/include/fields/background/templates/bgrTWTS.def
             *
             *  optional, omitted parameters with default values:
             *       phi (90.*(PI/180.) rad), beta_0 (c), tdelay_user(0 s),
             *       auto_tdelay(true), includeCollidingTWTS(false)
             */
            //templates::TWTSFieldB twtsFieldB( 25.0e-6,            /* focus_y [m] */
            //                                  0.8e-6,             /* wavelength [m] */
            //                                  30.0e-15 / 2.35482, /* pulselength [s] */
            //                                  20.0e-6,            /* w_x [m] */
            //                                  0.01 );             /* w_y [m] */

            //return amplitude * twtsFieldB( cellIdx, currentStep );
            // zero dummy - no B field
            return amplitude * float3_X(0.);
        }
    };

    class fieldBackgroundJ
    {
    public:
        /* Add this additional field? */
        static const bool activated = false;

        /* We use this to calculate your SI input back to our unit system */
        const float3_64 unitField;
        HDINLINE fieldBackgroundJ( const float3_64 unitField ) : unitField(unitField)
        {}

        /** Specify your background field J(r,t) here
         *
         * \param cellIdx The total cell id counted from the start at t=0
         * \param currentStep The current time step */
        HDINLINE float3_X
        operator()( const DataSpace<simDim>& cellIdx,
                    const uint32_t currentStep ) const
        {
            return float3_X(0.0, 0.0, 0.0);
        }
    };

} /* namespace picongpu */
